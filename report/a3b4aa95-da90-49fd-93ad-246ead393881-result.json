{"name": "test_review", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00712B63+47795]\n\t(No symbol) [0x006A67E1]\n\t(No symbol) [0x005AC7ED]\n\t(No symbol) [0x00593495]\n\t(No symbol) [0x005F893B]\n\t(No symbol) [0x00606D13]\n\t(No symbol) [0x005F4AC6]\n\t(No symbol) [0x005D13D7]\n\t(No symbol) [0x005D255D]\n\tGetHandleVerifier [0x00966F89+2490073]\n\tGetHandleVerifier [0x009AC361+2773681]\n\tGetHandleVerifier [0x009A6211+2748769]\n\tGetHandleVerifier [0x007916B0+566784]\n\t(No symbol) [0x006B019A]\n\t(No symbol) [0x006AC418]\n\t(No symbol) [0x006AC4FB]\n\t(No symbol) [0x0069F317]\n\tBaseThreadInitThunk [0x76417D59+25]\n\tRtlInitializeExceptionChain [0x7755B79B+107]\n\tRtlClearBits [0x7755B71F+191]", "trace": "self = <scripts.test04_admin_review.TestAdminReview object at 0x00000261C4FD1208>, name = 'test_tyc001'\n\n    def test_review(self, name=\"test_tyc001\"):\n        # 调用发布文章业务方法\n>       self.review.page_review(name)\n\nscripts\\test04_admin_review.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\page_admin_review.py:38: in page_review\n    self.page_click_model()\npage\\page_admin_review.py:10: in page_click_model\n    self.base_click(page.product)\nbase\\base.py:45: in base_click\n    self.base_find(loc).click()\nbase\\base.py:24: in base_find\n    poll_frequency=poll).until(lambda x: x.find_element(*loc)))\nC:\\Anaconda\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\nbase\\base.py:24: in <lambda>\n    poll_frequency=poll).until(lambda x: x.find_element(*loc)))\nC:\\Anaconda\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Anaconda\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000261C4FD1978>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76417D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7755B79B+107]\\\\n\\\\tRtlClearBits [0x7755B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00712B63+47795]\nE       \t(No symbol) [0x006A67E1]\nE       \t(No symbol) [0x005AC7ED]\nE       \t(No symbol) [0x00593495]\nE       \t(No symbol) [0x005F893B]\nE       \t(No symbol) [0x00606D13]\nE       \t(No symbol) [0x005F4AC6]\nE       \t(No symbol) [0x005D13D7]\nE       \t(No symbol) [0x005D255D]\nE       \tGetHandleVerifier [0x00966F89+2490073]\nE       \tGetHandleVerifier [0x009AC361+2773681]\nE       \tGetHandleVerifier [0x009A6211+2748769]\nE       \tGetHandleVerifier [0x007916B0+566784]\nE       \t(No symbol) [0x006B019A]\nE       \t(No symbol) [0x006AC418]\nE       \t(No symbol) [0x006AC4FB]\nE       \t(No symbol) [0x0069F317]\nE       \tBaseThreadInitThunk [0x76417D59+25]\nE       \tRtlInitializeExceptionChain [0x7755B79B+107]\nE       \tRtlClearBits [0x7755B71F+191]\n\nC:\\Anaconda\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1692088370364, "stop": 1692088399791, "uuid": "b3e89842-f312-4d68-8c69-e300b69fe13a", "historyId": "6a4d4f330efcdc00ce5483c394fd0a97", "testCaseId": "6a4d4f330efcdc00ce5483c394fd0a97", "fullName": "scripts.test04_admin_review.TestAdminReview#test_review", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test04_admin_review"}, {"name": "subSuite", "value": "TestAdminReview"}, {"name": "host", "value": "MateBook14"}, {"name": "thread", "value": "34128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test04_admin_review"}]}